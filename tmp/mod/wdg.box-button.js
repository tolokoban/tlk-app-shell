{"intl":"var _=function(){var D={\"en\":{}},X=require(\"$\").intl;function _(){return X(D,arguments);}_.all=D;return _}();\n","src":"/** @module wdg.box-button */require( 'wdg.box-button', function(require, module, exports) { var _=function(){var D={\"en\":{}},X=require(\"$\").intl;function _(){return X(D,arguments);}_.all=D;return _}();\n    \"use strict\";\n/**\n * @module wdg.box-button\n *\n * @description\n * A box button is a box containing  any piece of HTML. The box can be\n * clicked and has an elevation animation.\n *\n * @example\n * var mod = require('wdg.box-button');\n */\n\nvar $ = require(\"dom\");\nvar DB = require(\"tfw.data-binding\");\nvar Touchable = require(\"tfw.touchable\");\n\n/**\n * @param {object} opts\n * * {boolean} `enabled`: Mettre `false` pour désactiver le bouton.\n * * {boolean} `selected`: Highlight the button if selected.\n * * {object} `content`: Associe le _Tap_ à l'envoi d'un mail.\n * * {any} `value`: A value to set to `action` whan tap occured.\n *\n * @example\n * var BoxButton = require(\"wdg.box-button\");\n * var btn = new BoxButton({ content: $.div(['Hello world!']), value: 'OK' });\n * @class BoxButton\n */\nvar BoxButton = function(opts) {\n    var that = this;\n\n    var elem = $.elem( this, 'div', 'wdg-box-button', 'theme-elevation-2' );\n\n    // Animate the pressing.\n    var touchable = new Touchable( elem, {\n        classToAdd: 'theme-elevation-8',\n        color: \"#777\"\n    });\n    touchable.tap.add( this.fire.bind( this ) );\n    \n    var refresh = function() {\n        $.removeClass( \n            elem, 'theme-color-bg-4', 'theme-color-bg-B0', 'theme-color-bg-B5'\n        );\n        touchable.enabled = that.enabled;\n        if (!that.enabled) {\n            $.addClass( elem, 'theme-color-bg-B5' );\n        }\n        else if (that.selected) {\n            $.addClass( elem, 'theme-color-bg-4' );\n            touchable.color = \"#fff\";\n        }\n        else {\n            $.addClass( elem, 'pointer', 'theme-color-bg-B0' );\n            touchable.color = \"#9cd\";\n        }\n    };\n\n    DB.prop(this, 'value');\n    DB.propBoolean(this, 'enabled')(refresh);\n    DB.propBoolean(this, 'selected')(refresh);\n    DB.prop(this, 'content')(function(v) {\n        $.clear(elem);\n        if (!Array.isArray(v)) v = [v];\n        v.forEach(function (itm) {\n            $.add(elem, itm);            \n        });\n    });\n    DB.prop(this, 'action', 0);\n    DB.propAddClass(this, 'wide');\n    DB.propRemoveClass(this, 'visible', 'hide');\n\n    opts = DB.extend({\n        content: [],\n        value: \"action\",\n        action: 0,\n        enabled: true,\n        selected: false,\n        wide: false,\n        visible: true\n    }, opts, this);\n};\n\n/**\n * @class BoxButton\n * @function on\n * @param {function} slot - Function to call when `action` has changed.\n */\nBoxButton.prototype.on = function(slot) {\n    return DB.bind( this, 'action', slot );\n};\n\n/**\n * Simulate a click on the button if it is enabled.\n */\nBoxButton.prototype.fire = function() {\n    if (this.enabled) {\n        DB.fire( this, 'action', this.value );\n    }\n};\n\n\nmodule.exports = BoxButton;\n\n\n  \nmodule.exports._ = _;\n/**\n * @module wdg.box-button\n * @see module:$\n * @see module:dom\n * @see module:tfw.data-binding\n * @see module:tfw.touchable\n\n */\n});","zip":"require(\"wdg.box-button\",function(e,t,o){var n=function(){function t(){return n(o,arguments)}var o={en:{}},n=e(\"$\").intl;return t.all=o,t}(),i=e(\"dom\"),a=e(\"tfw.data-binding\"),r=e(\"tfw.touchable\"),l=function(e){var t=this,o=i.elem(this,\"div\",\"wdg-box-button\",\"theme-elevation-2\"),n=new r(o,{classToAdd:\"theme-elevation-8\",color:\"#777\"});n.tap.add(this.fire.bind(this));var l=function(){i.removeClass(o,\"theme-color-bg-4\",\"theme-color-bg-B0\",\"theme-color-bg-B5\"),n.enabled=t.enabled,t.enabled?t.selected?(i.addClass(o,\"theme-color-bg-4\"),n.color=\"#fff\"):(i.addClass(o,\"pointer\",\"theme-color-bg-B0\"),n.color=\"#9cd\"):i.addClass(o,\"theme-color-bg-B5\")};a.prop(this,\"value\"),a.propBoolean(this,\"enabled\")(l),a.propBoolean(this,\"selected\")(l),a.prop(this,\"content\")(function(e){i.clear(o),Array.isArray(e)||(e=[e]),e.forEach(function(e){i.add(o,e)})}),a.prop(this,\"action\",0),a.propAddClass(this,\"wide\"),a.propRemoveClass(this,\"visible\",\"hide\"),e=a.extend({content:[],value:\"action\",action:0,enabled:!0,selected:!1,wide:!1,visible:!0},e,this)};l.prototype.on=function(e){return a.bind(this,\"action\",e)},l.prototype.fire=function(){this.enabled&&a.fire(this,\"action\",this.value)},t.exports=l,t.exports._=n});\n//# sourceMappingURL=wdg.box-button.js.map","map":{"version":3,"file":"wdg.box-button.js","sources":["wdg.box-button.js"],"sourcesContent":["/** @module wdg.box-button */require( 'wdg.box-button', function(require, module, exports) { var _=function(){var D={\"en\":{}},X=require(\"$\").intl;function _(){return X(D,arguments);}_.all=D;return _}();\n    \"use strict\";\n/**\n * @module wdg.box-button\n *\n * @description\n * A box button is a box containing  any piece of HTML. The box can be\n * clicked and has an elevation animation.\n *\n * @example\n * var mod = require('wdg.box-button');\n */\n\nvar $ = require(\"dom\");\nvar DB = require(\"tfw.data-binding\");\nvar Touchable = require(\"tfw.touchable\");\n\n/**\n * @param {object} opts\n * * {boolean} `enabled`: Mettre `false` pour désactiver le bouton.\n * * {boolean} `selected`: Highlight the button if selected.\n * * {object} `content`: Associe le _Tap_ à l'envoi d'un mail.\n * * {any} `value`: A value to set to `action` whan tap occured.\n *\n * @example\n * var BoxButton = require(\"wdg.box-button\");\n * var btn = new BoxButton({ content: $.div(['Hello world!']), value: 'OK' });\n * @class BoxButton\n */\nvar BoxButton = function(opts) {\n    var that = this;\n\n    var elem = $.elem( this, 'div', 'wdg-box-button', 'theme-elevation-2' );\n\n    // Animate the pressing.\n    var touchable = new Touchable( elem, {\n        classToAdd: 'theme-elevation-8',\n        color: \"#777\"\n    });\n    touchable.tap.add( this.fire.bind( this ) );\n    \n    var refresh = function() {\n        $.removeClass( \n            elem, 'theme-color-bg-4', 'theme-color-bg-B0', 'theme-color-bg-B5'\n        );\n        touchable.enabled = that.enabled;\n        if (!that.enabled) {\n            $.addClass( elem, 'theme-color-bg-B5' );\n        }\n        else if (that.selected) {\n            $.addClass( elem, 'theme-color-bg-4' );\n            touchable.color = \"#fff\";\n        }\n        else {\n            $.addClass( elem, 'pointer', 'theme-color-bg-B0' );\n            touchable.color = \"#9cd\";\n        }\n    };\n\n    DB.prop(this, 'value');\n    DB.propBoolean(this, 'enabled')(refresh);\n    DB.propBoolean(this, 'selected')(refresh);\n    DB.prop(this, 'content')(function(v) {\n        $.clear(elem);\n        if (!Array.isArray(v)) v = [v];\n        v.forEach(function (itm) {\n            $.add(elem, itm);            \n        });\n    });\n    DB.prop(this, 'action', 0);\n    DB.propAddClass(this, 'wide');\n    DB.propRemoveClass(this, 'visible', 'hide');\n\n    opts = DB.extend({\n        content: [],\n        value: \"action\",\n        action: 0,\n        enabled: true,\n        selected: false,\n        wide: false,\n        visible: true\n    }, opts, this);\n};\n\n/**\n * @class BoxButton\n * @function on\n * @param {function} slot - Function to call when `action` has changed.\n */\nBoxButton.prototype.on = function(slot) {\n    return DB.bind( this, 'action', slot );\n};\n\n/**\n * Simulate a click on the button if it is enabled.\n */\nBoxButton.prototype.fire = function() {\n    if (this.enabled) {\n        DB.fire( this, 'action', this.value );\n    }\n};\n\n\nmodule.exports = BoxButton;\n\n\n  \nmodule.exports._ = _;\n});"],"names":["require","module","exports","_","X","D","arguments","en","intl","all","$","DB","Touchable","BoxButton","opts","that","this","elem","touchable","classToAdd","color","tap","add","fire","bind","refresh","removeClass","enabled","selected","addClass","prop","propBoolean","v","clear","Array","isArray","forEach","itm","propAddClass","propRemoveClass","extend","content","value","action","wide","visible","prototype","on","slot"],"mappings":"AAA6BA,QAAS,iBAAkB,SAASA,EAASC,EAAQC,GAAW,GAAIC,GAAE,WAA+C,QAASA,KAAI,MAAOC,GAAEC,EAAEC,WAA5D,GAAID,IAAGE,OAASH,EAAEJ,EAAQ,KAAKQ,IAAiD,OAARL,GAAEM,IAAIJ,EAASF,KAajMO,EAAIV,EAAQ,OACZW,EAAKX,EAAQ,oBACbY,EAAYZ,EAAQ,iBAcpBa,EAAY,SAASC,GACrB,GAAIC,GAAOC,KAEPC,EAAOP,EAAEO,KAAMD,KAAM,MAAO,iBAAkB,qBAG9CE,EAAY,GAAIN,GAAWK,GAC3BE,WAAY,oBACZC,MAAO,QAEXF,GAAUG,IAAIC,IAAKN,KAAKO,KAAKC,KAAMR,MAEnC,IAAIS,GAAU,WACVf,EAAEgB,YACET,EAAM,mBAAoB,oBAAqB,qBAEnDC,EAAUS,QAAUZ,EAAKY,QACpBZ,EAAKY,QAGDZ,EAAKa,UACVlB,EAAEmB,SAAUZ,EAAM,oBAClBC,EAAUE,MAAQ,SAGlBV,EAAEmB,SAAUZ,EAAM,UAAW,qBAC7BC,EAAUE,MAAQ,QARlBV,EAAEmB,SAAUZ,EAAM,qBAY1BN,GAAGmB,KAAKd,KAAM,SACdL,EAAGoB,YAAYf,KAAM,WAAWS,GAChCd,EAAGoB,YAAYf,KAAM,YAAYS,GACjCd,EAAGmB,KAAKd,KAAM,WAAW,SAASgB,GAC9BtB,EAAEuB,MAAMhB,GACHiB,MAAMC,QAAQH,KAAIA,GAAKA,IAC5BA,EAAEI,QAAQ,SAAUC,GAChB3B,EAAEY,IAAIL,EAAMoB,OAGpB1B,EAAGmB,KAAKd,KAAM,SAAU,GACxBL,EAAG2B,aAAatB,KAAM,QACtBL,EAAG4B,gBAAgBvB,KAAM,UAAW,QAEpCF,EAAOH,EAAG6B,QACNC,WACAC,MAAO,SACPC,OAAQ,EACRhB,SAAS,EACTC,UAAU,EACVgB,MAAM,EACNC,SAAS,GACV/B,EAAME,MAQbH,GAAUiC,UAAUC,GAAK,SAASC,GAC9B,MAAOrC,GAAGa,KAAMR,KAAM,SAAUgC,IAMpCnC,EAAUiC,UAAUvB,KAAO,WACnBP,KAAKW,SACLhB,EAAGY,KAAMP,KAAM,SAAUA,KAAK0B,QAKtCzC,EAAOC,QAAUW,EAIjBZ,EAAOC,QAAQC,EAAIA"},"dependencies":["mod/$","mod/dom","mod/tfw.data-binding","mod/tfw.touchable"]}